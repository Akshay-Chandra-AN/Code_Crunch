
fault_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001348  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080014f8  080014f8  000024f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001650  08001650  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001650  08001650  00002650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001658  08001658  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001658  08001658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800165c  0800165c  0000265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001660  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009e3  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000394  00000000  00000000  00003a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00003e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d26  00000000  00000000  0000401d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013d8  00000000  00000000  00006d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009946  00000000  00000000  0000811b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011a61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bcc  00000000  00000000  00011aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00012670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080014e0 	.word	0x080014e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080014e0 	.word	0x080014e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
#include<stdio.h>

void UsageFault_Handler_c(uint32_t *pMSP);

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	//1. enable all configurable exceptions : usage fault, mem manage fault and bus fault

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000296:	4b10      	ldr	r3, [pc, #64]	@ (80002d8 <main+0x48>)
 8000298:	60fb      	str	r3, [r7, #12]

	*pSHCSR |= ( 1 << 16); //mem manage
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]


	//3. lets force the processor to execute some undefined instruction
	uint32_t *pSRAM = (uint32_t*)0x20010000;
 80002be:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <main+0x4c>)
 80002c0:	60bb      	str	r3, [r7, #8]

	/*This is an undefined instruction value */
	*pSRAM = 0xFFFFFFFF;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002c8:	601a      	str	r2, [r3, #0]

   /* This is a function pointer variable */
	void (*some_address) (void);

   /* initialize  the function pointer variable to some address */
	some_address = (void*)0x20010001;
 80002ca:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <main+0x50>)
 80002cc:	607b      	str	r3, [r7, #4]

   /* change PC to jump to location 0x20010000 */
	some_address();
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4798      	blx	r3

	//4. analyze the fault

	for(;;);
 80002d2:	bf00      	nop
 80002d4:	e7fd      	b.n	80002d2 <main+0x42>
 80002d6:	bf00      	nop
 80002d8:	e000ed24 	.word	0xe000ed24
 80002dc:	20010000 	.word	0x20010000
 80002e0:	20010001 	.word	0x20010001

080002e4 <HardFault_Handler>:
}

//2. implement the fault handlers
void HardFault_Handler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80002e8:	4802      	ldr	r0, [pc, #8]	@ (80002f4 <HardFault_Handler+0x10>)
 80002ea:	f000 fa9f 	bl	800082c <puts>
	while(1);
 80002ee:	bf00      	nop
 80002f0:	e7fd      	b.n	80002ee <HardFault_Handler+0xa>
 80002f2:	bf00      	nop
 80002f4:	080014f8 	.word	0x080014f8

080002f8 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80002fc:	4802      	ldr	r0, [pc, #8]	@ (8000308 <MemManage_Handler+0x10>)
 80002fe:	f000 fa95 	bl	800082c <puts>
	while(1);
 8000302:	bf00      	nop
 8000304:	e7fd      	b.n	8000302 <MemManage_Handler+0xa>
 8000306:	bf00      	nop
 8000308:	08001510 	.word	0x08001510

0800030c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000310:	4802      	ldr	r0, [pc, #8]	@ (800031c <BusFault_Handler+0x10>)
 8000312:	f000 fa8b 	bl	800082c <puts>
	while(1);
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <BusFault_Handler+0xa>
 800031a:	bf00      	nop
 800031c:	08001528 	.word	0x08001528

08000320 <UsageFault_Handler>:
__attribute__ ((naked)) void UsageFault_Handler(void)
{
	//here we extracted the value of MSP which happens to be the
	//base address of the stack frame(thread mode) which got saved during the exception entry
	//from thread mode to handler mode
	__asm ("MRS r0,MSP");
 8000320:	f3ef 8008 	mrs	r0, MSP
	__asm ("B UsageFault_Handler_c");
 8000324:	f000 b802 	b.w	800032c <UsageFault_Handler_c>
}
 8000328:	bf00      	nop
	...

0800032c <UsageFault_Handler_c>:

void UsageFault_Handler_c(uint32_t *pBaseStackFrame)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
 8000334:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <UsageFault_Handler_c+0x9c>)
 8000336:	60fb      	str	r3, [r7, #12]
	printf("Exception : UsageFault\n");
 8000338:	4824      	ldr	r0, [pc, #144]	@ (80003cc <UsageFault_Handler_c+0xa0>)
 800033a:	f000 fa77 	bl	800082c <puts>
	printf("UFSR = %lx\n",(*pUFSR) & 0xFFFF);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	b29b      	uxth	r3, r3
 8000344:	4619      	mov	r1, r3
 8000346:	4822      	ldr	r0, [pc, #136]	@ (80003d0 <UsageFault_Handler_c+0xa4>)
 8000348:	f000 fa08 	bl	800075c <iprintf>
	printf("pBaseStackFrame = %p\n",pBaseStackFrame);
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	4821      	ldr	r0, [pc, #132]	@ (80003d4 <UsageFault_Handler_c+0xa8>)
 8000350:	f000 fa04 	bl	800075c <iprintf>
	printf("Value of R0 = %lx\n", pBaseStackFrame[0]);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	481f      	ldr	r0, [pc, #124]	@ (80003d8 <UsageFault_Handler_c+0xac>)
 800035c:	f000 f9fe 	bl	800075c <iprintf>
	printf("Value of R1 = %lx\n", pBaseStackFrame[1]);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3304      	adds	r3, #4
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	481c      	ldr	r0, [pc, #112]	@ (80003dc <UsageFault_Handler_c+0xb0>)
 800036a:	f000 f9f7 	bl	800075c <iprintf>
	printf("Value of R2 = %lx\n", pBaseStackFrame[2]);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3308      	adds	r3, #8
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4619      	mov	r1, r3
 8000376:	481a      	ldr	r0, [pc, #104]	@ (80003e0 <UsageFault_Handler_c+0xb4>)
 8000378:	f000 f9f0 	bl	800075c <iprintf>
	printf("Value of R3 = %lx\n", pBaseStackFrame[3]);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	330c      	adds	r3, #12
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4817      	ldr	r0, [pc, #92]	@ (80003e4 <UsageFault_Handler_c+0xb8>)
 8000386:	f000 f9e9 	bl	800075c <iprintf>
	printf("Value of R12 = %lx\n", pBaseStackFrame[4]);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3310      	adds	r3, #16
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	4815      	ldr	r0, [pc, #84]	@ (80003e8 <UsageFault_Handler_c+0xbc>)
 8000394:	f000 f9e2 	bl	800075c <iprintf>
	printf("Value of LR = %lx\n", pBaseStackFrame[5]);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3314      	adds	r3, #20
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4619      	mov	r1, r3
 80003a0:	4812      	ldr	r0, [pc, #72]	@ (80003ec <UsageFault_Handler_c+0xc0>)
 80003a2:	f000 f9db 	bl	800075c <iprintf>
	printf("Value of PC = %lx\n", pBaseStackFrame[6]);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3318      	adds	r3, #24
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4810      	ldr	r0, [pc, #64]	@ (80003f0 <UsageFault_Handler_c+0xc4>)
 80003b0:	f000 f9d4 	bl	800075c <iprintf>
	printf("Value of XPSR = %lx\n", pBaseStackFrame[7]);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	331c      	adds	r3, #28
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4619      	mov	r1, r3
 80003bc:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <UsageFault_Handler_c+0xc8>)
 80003be:	f000 f9cd 	bl	800075c <iprintf>
	while(1);
 80003c2:	bf00      	nop
 80003c4:	e7fd      	b.n	80003c2 <UsageFault_Handler_c+0x96>
 80003c6:	bf00      	nop
 80003c8:	e000ed2a 	.word	0xe000ed2a
 80003cc:	08001540 	.word	0x08001540
 80003d0:	08001558 	.word	0x08001558
 80003d4:	08001564 	.word	0x08001564
 80003d8:	0800157c 	.word	0x0800157c
 80003dc:	08001590 	.word	0x08001590
 80003e0:	080015a4 	.word	0x080015a4
 80003e4:	080015b8 	.word	0x080015b8
 80003e8:	080015cc 	.word	0x080015cc
 80003ec:	080015e0 	.word	0x080015e0
 80003f0:	080015f4 	.word	0x080015f4
 80003f4:	08001608 	.word	0x08001608

080003f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <ITM_SendChar+0x44>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <ITM_SendChar+0x44>)
 8000408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800040c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <ITM_SendChar+0x48>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <ITM_SendChar+0x48>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800041a:	bf00      	nop
 800041c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f8      	beq.n	800041c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800042a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	e000edfc 	.word	0xe000edfc
 8000440:	e0000e00 	.word	0xe0000e00

08000444 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e00a      	b.n	800046c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000456:	f3af 8000 	nop.w
 800045a:	4601      	mov	r1, r0
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	60ba      	str	r2, [r7, #8]
 8000462:	b2ca      	uxtb	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3301      	adds	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbf0      	blt.n	8000456 <_read+0x12>
  }

  return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b086      	sub	sp, #24
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	e009      	b.n	80004a4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffad 	bl	80003f8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	3301      	adds	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	dbf1      	blt.n	8000490 <_write+0x12>
  }
  return len;
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_close>:

int _close(int file)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004dc:	605a      	str	r2, [r3, #4]
  return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <_isatty>:

int _isatty(int file)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004fe:	b480      	push	{r7}
 8000500:	b085      	sub	sp, #20
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	60b9      	str	r1, [r7, #8]
 8000508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
	...

08000518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000520:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <_sbrk+0x5c>)
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <_sbrk+0x60>)
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <_sbrk+0x64>)
 8000536:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <_sbrk+0x68>)
 8000538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <_sbrk+0x64>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	429a      	cmp	r2, r3
 8000546:	d207      	bcs.n	8000558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000548:	f000 f980 	bl	800084c <__errno>
 800054c:	4603      	mov	r3, r0
 800054e:	220c      	movs	r2, #12
 8000550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000556:	e009      	b.n	800056c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4a05      	ldr	r2, [pc, #20]	@ (800057c <_sbrk+0x64>)
 8000568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20020000 	.word	0x20020000
 8000578:	00000400 	.word	0x00000400
 800057c:	20000078 	.word	0x20000078
 8000580:	200001c8 	.word	0x200001c8

08000584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	@ (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000588:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	@ (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b2:	f000 f951 	bl	8000858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff fe6b 	bl	8000290 <main>

080005ba <LoopForever>:

LoopForever:
  b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005c8:	08001660 	.word	0x08001660
  ldr r2, =_sbss
 80005cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d0:	200001c8 	.word	0x200001c8

080005d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>
	...

080005d8 <std>:
 80005d8:	2300      	movs	r3, #0
 80005da:	b510      	push	{r4, lr}
 80005dc:	4604      	mov	r4, r0
 80005de:	e9c0 3300 	strd	r3, r3, [r0]
 80005e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005e6:	6083      	str	r3, [r0, #8]
 80005e8:	8181      	strh	r1, [r0, #12]
 80005ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80005ec:	81c2      	strh	r2, [r0, #14]
 80005ee:	6183      	str	r3, [r0, #24]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2208      	movs	r2, #8
 80005f4:	305c      	adds	r0, #92	@ 0x5c
 80005f6:	f000 f921 	bl	800083c <memset>
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <std+0x58>)
 80005fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <std+0x5c>)
 8000600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x60>)
 8000604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <std+0x64>)
 8000608:	6323      	str	r3, [r4, #48]	@ 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <std+0x68>)
 800060c:	6224      	str	r4, [r4, #32]
 800060e:	429c      	cmp	r4, r3
 8000610:	d006      	beq.n	8000620 <std+0x48>
 8000612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000616:	4294      	cmp	r4, r2
 8000618:	d002      	beq.n	8000620 <std+0x48>
 800061a:	33d0      	adds	r3, #208	@ 0xd0
 800061c:	429c      	cmp	r4, r3
 800061e:	d105      	bne.n	800062c <std+0x54>
 8000620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000628:	f000 b93a 	b.w	80008a0 <__retarget_lock_init_recursive>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	080010e9 	.word	0x080010e9
 8000634:	0800110b 	.word	0x0800110b
 8000638:	08001143 	.word	0x08001143
 800063c:	08001167 	.word	0x08001167
 8000640:	2000007c 	.word	0x2000007c

08000644 <stdio_exit_handler>:
 8000644:	4a02      	ldr	r2, [pc, #8]	@ (8000650 <stdio_exit_handler+0xc>)
 8000646:	4903      	ldr	r1, [pc, #12]	@ (8000654 <stdio_exit_handler+0x10>)
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <stdio_exit_handler+0x14>)
 800064a:	f000 b869 	b.w	8000720 <_fwalk_sglue>
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	08001081 	.word	0x08001081
 8000658:	20000010 	.word	0x20000010

0800065c <cleanup_stdio>:
 800065c:	6841      	ldr	r1, [r0, #4]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <cleanup_stdio+0x34>)
 8000660:	4299      	cmp	r1, r3
 8000662:	b510      	push	{r4, lr}
 8000664:	4604      	mov	r4, r0
 8000666:	d001      	beq.n	800066c <cleanup_stdio+0x10>
 8000668:	f000 fd0a 	bl	8001080 <_fflush_r>
 800066c:	68a1      	ldr	r1, [r4, #8]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <cleanup_stdio+0x38>)
 8000670:	4299      	cmp	r1, r3
 8000672:	d002      	beq.n	800067a <cleanup_stdio+0x1e>
 8000674:	4620      	mov	r0, r4
 8000676:	f000 fd03 	bl	8001080 <_fflush_r>
 800067a:	68e1      	ldr	r1, [r4, #12]
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <cleanup_stdio+0x3c>)
 800067e:	4299      	cmp	r1, r3
 8000680:	d004      	beq.n	800068c <cleanup_stdio+0x30>
 8000682:	4620      	mov	r0, r4
 8000684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000688:	f000 bcfa 	b.w	8001080 <_fflush_r>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	2000007c 	.word	0x2000007c
 8000694:	200000e4 	.word	0x200000e4
 8000698:	2000014c 	.word	0x2000014c

0800069c <global_stdio_init.part.0>:
 800069c:	b510      	push	{r4, lr}
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <global_stdio_init.part.0+0x30>)
 80006a0:	4c0b      	ldr	r4, [pc, #44]	@ (80006d0 <global_stdio_init.part.0+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <global_stdio_init.part.0+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	4620      	mov	r0, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	f7ff ff94 	bl	80005d8 <std>
 80006b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006b4:	2201      	movs	r2, #1
 80006b6:	2109      	movs	r1, #9
 80006b8:	f7ff ff8e 	bl	80005d8 <std>
 80006bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006c0:	2202      	movs	r2, #2
 80006c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c6:	2112      	movs	r1, #18
 80006c8:	f7ff bf86 	b.w	80005d8 <std>
 80006cc:	200001b4 	.word	0x200001b4
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	08000645 	.word	0x08000645

080006d8 <__sfp_lock_acquire>:
 80006d8:	4801      	ldr	r0, [pc, #4]	@ (80006e0 <__sfp_lock_acquire+0x8>)
 80006da:	f000 b8e2 	b.w	80008a2 <__retarget_lock_acquire_recursive>
 80006de:	bf00      	nop
 80006e0:	200001b9 	.word	0x200001b9

080006e4 <__sfp_lock_release>:
 80006e4:	4801      	ldr	r0, [pc, #4]	@ (80006ec <__sfp_lock_release+0x8>)
 80006e6:	f000 b8dd 	b.w	80008a4 <__retarget_lock_release_recursive>
 80006ea:	bf00      	nop
 80006ec:	200001b9 	.word	0x200001b9

080006f0 <__sinit>:
 80006f0:	b510      	push	{r4, lr}
 80006f2:	4604      	mov	r4, r0
 80006f4:	f7ff fff0 	bl	80006d8 <__sfp_lock_acquire>
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	b11b      	cbz	r3, 8000704 <__sinit+0x14>
 80006fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000700:	f7ff bff0 	b.w	80006e4 <__sfp_lock_release>
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__sinit+0x28>)
 8000706:	6223      	str	r3, [r4, #32]
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__sinit+0x2c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f5      	bne.n	80006fc <__sinit+0xc>
 8000710:	f7ff ffc4 	bl	800069c <global_stdio_init.part.0>
 8000714:	e7f2      	b.n	80006fc <__sinit+0xc>
 8000716:	bf00      	nop
 8000718:	0800065d 	.word	0x0800065d
 800071c:	200001b4 	.word	0x200001b4

08000720 <_fwalk_sglue>:
 8000720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000724:	4607      	mov	r7, r0
 8000726:	4688      	mov	r8, r1
 8000728:	4614      	mov	r4, r2
 800072a:	2600      	movs	r6, #0
 800072c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000730:	f1b9 0901 	subs.w	r9, r9, #1
 8000734:	d505      	bpl.n	8000742 <_fwalk_sglue+0x22>
 8000736:	6824      	ldr	r4, [r4, #0]
 8000738:	2c00      	cmp	r4, #0
 800073a:	d1f7      	bne.n	800072c <_fwalk_sglue+0xc>
 800073c:	4630      	mov	r0, r6
 800073e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000742:	89ab      	ldrh	r3, [r5, #12]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d907      	bls.n	8000758 <_fwalk_sglue+0x38>
 8000748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800074c:	3301      	adds	r3, #1
 800074e:	d003      	beq.n	8000758 <_fwalk_sglue+0x38>
 8000750:	4629      	mov	r1, r5
 8000752:	4638      	mov	r0, r7
 8000754:	47c0      	blx	r8
 8000756:	4306      	orrs	r6, r0
 8000758:	3568      	adds	r5, #104	@ 0x68
 800075a:	e7e9      	b.n	8000730 <_fwalk_sglue+0x10>

0800075c <iprintf>:
 800075c:	b40f      	push	{r0, r1, r2, r3}
 800075e:	b507      	push	{r0, r1, r2, lr}
 8000760:	4906      	ldr	r1, [pc, #24]	@ (800077c <iprintf+0x20>)
 8000762:	ab04      	add	r3, sp, #16
 8000764:	6808      	ldr	r0, [r1, #0]
 8000766:	f853 2b04 	ldr.w	r2, [r3], #4
 800076a:	6881      	ldr	r1, [r0, #8]
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	f000 f8c1 	bl	80008f4 <_vfiprintf_r>
 8000772:	b003      	add	sp, #12
 8000774:	f85d eb04 	ldr.w	lr, [sp], #4
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr
 800077c:	2000000c 	.word	0x2000000c

08000780 <_puts_r>:
 8000780:	6a03      	ldr	r3, [r0, #32]
 8000782:	b570      	push	{r4, r5, r6, lr}
 8000784:	6884      	ldr	r4, [r0, #8]
 8000786:	4605      	mov	r5, r0
 8000788:	460e      	mov	r6, r1
 800078a:	b90b      	cbnz	r3, 8000790 <_puts_r+0x10>
 800078c:	f7ff ffb0 	bl	80006f0 <__sinit>
 8000790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000792:	07db      	lsls	r3, r3, #31
 8000794:	d405      	bmi.n	80007a2 <_puts_r+0x22>
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	0598      	lsls	r0, r3, #22
 800079a:	d402      	bmi.n	80007a2 <_puts_r+0x22>
 800079c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800079e:	f000 f880 	bl	80008a2 <__retarget_lock_acquire_recursive>
 80007a2:	89a3      	ldrh	r3, [r4, #12]
 80007a4:	0719      	lsls	r1, r3, #28
 80007a6:	d502      	bpl.n	80007ae <_puts_r+0x2e>
 80007a8:	6923      	ldr	r3, [r4, #16]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d135      	bne.n	800081a <_puts_r+0x9a>
 80007ae:	4621      	mov	r1, r4
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 fd1b 	bl	80011ec <__swsetup_r>
 80007b6:	b380      	cbz	r0, 800081a <_puts_r+0x9a>
 80007b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80007bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007be:	07da      	lsls	r2, r3, #31
 80007c0:	d405      	bmi.n	80007ce <_puts_r+0x4e>
 80007c2:	89a3      	ldrh	r3, [r4, #12]
 80007c4:	059b      	lsls	r3, r3, #22
 80007c6:	d402      	bmi.n	80007ce <_puts_r+0x4e>
 80007c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007ca:	f000 f86b 	bl	80008a4 <__retarget_lock_release_recursive>
 80007ce:	4628      	mov	r0, r5
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da04      	bge.n	80007e0 <_puts_r+0x60>
 80007d6:	69a2      	ldr	r2, [r4, #24]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dc17      	bgt.n	800080c <_puts_r+0x8c>
 80007dc:	290a      	cmp	r1, #10
 80007de:	d015      	beq.n	800080c <_puts_r+0x8c>
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	6022      	str	r2, [r4, #0]
 80007e6:	7019      	strb	r1, [r3, #0]
 80007e8:	68a3      	ldr	r3, [r4, #8]
 80007ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007ee:	3b01      	subs	r3, #1
 80007f0:	60a3      	str	r3, [r4, #8]
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d1ed      	bne.n	80007d2 <_puts_r+0x52>
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da11      	bge.n	800081e <_puts_r+0x9e>
 80007fa:	4622      	mov	r2, r4
 80007fc:	210a      	movs	r1, #10
 80007fe:	4628      	mov	r0, r5
 8000800:	f000 fcb5 	bl	800116e <__swbuf_r>
 8000804:	3001      	adds	r0, #1
 8000806:	d0d7      	beq.n	80007b8 <_puts_r+0x38>
 8000808:	250a      	movs	r5, #10
 800080a:	e7d7      	b.n	80007bc <_puts_r+0x3c>
 800080c:	4622      	mov	r2, r4
 800080e:	4628      	mov	r0, r5
 8000810:	f000 fcad 	bl	800116e <__swbuf_r>
 8000814:	3001      	adds	r0, #1
 8000816:	d1e7      	bne.n	80007e8 <_puts_r+0x68>
 8000818:	e7ce      	b.n	80007b8 <_puts_r+0x38>
 800081a:	3e01      	subs	r6, #1
 800081c:	e7e4      	b.n	80007e8 <_puts_r+0x68>
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	6022      	str	r2, [r4, #0]
 8000824:	220a      	movs	r2, #10
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e7ee      	b.n	8000808 <_puts_r+0x88>
	...

0800082c <puts>:
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <puts+0xc>)
 800082e:	4601      	mov	r1, r0
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	f7ff bfa5 	b.w	8000780 <_puts_r>
 8000836:	bf00      	nop
 8000838:	2000000c 	.word	0x2000000c

0800083c <memset>:
 800083c:	4402      	add	r2, r0
 800083e:	4603      	mov	r3, r0
 8000840:	4293      	cmp	r3, r2
 8000842:	d100      	bne.n	8000846 <memset+0xa>
 8000844:	4770      	bx	lr
 8000846:	f803 1b01 	strb.w	r1, [r3], #1
 800084a:	e7f9      	b.n	8000840 <memset+0x4>

0800084c <__errno>:
 800084c:	4b01      	ldr	r3, [pc, #4]	@ (8000854 <__errno+0x8>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2000000c 	.word	0x2000000c

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	4d0d      	ldr	r5, [pc, #52]	@ (8000890 <__libc_init_array+0x38>)
 800085c:	4c0d      	ldr	r4, [pc, #52]	@ (8000894 <__libc_init_array+0x3c>)
 800085e:	1b64      	subs	r4, r4, r5
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	2600      	movs	r6, #0
 8000864:	42a6      	cmp	r6, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	4d0b      	ldr	r5, [pc, #44]	@ (8000898 <__libc_init_array+0x40>)
 800086a:	4c0c      	ldr	r4, [pc, #48]	@ (800089c <__libc_init_array+0x44>)
 800086c:	f000 fe38 	bl	80014e0 <_init>
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	2600      	movs	r6, #0
 8000876:	42a6      	cmp	r6, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000880:	4798      	blx	r3
 8000882:	3601      	adds	r6, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f855 3b04 	ldr.w	r3, [r5], #4
 800088a:	4798      	blx	r3
 800088c:	3601      	adds	r6, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	08001658 	.word	0x08001658
 8000894:	08001658 	.word	0x08001658
 8000898:	08001658 	.word	0x08001658
 800089c:	0800165c 	.word	0x0800165c

080008a0 <__retarget_lock_init_recursive>:
 80008a0:	4770      	bx	lr

080008a2 <__retarget_lock_acquire_recursive>:
 80008a2:	4770      	bx	lr

080008a4 <__retarget_lock_release_recursive>:
 80008a4:	4770      	bx	lr

080008a6 <__sfputc_r>:
 80008a6:	6893      	ldr	r3, [r2, #8]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	b410      	push	{r4}
 80008ae:	6093      	str	r3, [r2, #8]
 80008b0:	da07      	bge.n	80008c2 <__sfputc_r+0x1c>
 80008b2:	6994      	ldr	r4, [r2, #24]
 80008b4:	42a3      	cmp	r3, r4
 80008b6:	db01      	blt.n	80008bc <__sfputc_r+0x16>
 80008b8:	290a      	cmp	r1, #10
 80008ba:	d102      	bne.n	80008c2 <__sfputc_r+0x1c>
 80008bc:	bc10      	pop	{r4}
 80008be:	f000 bc56 	b.w	800116e <__swbuf_r>
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	1c58      	adds	r0, r3, #1
 80008c6:	6010      	str	r0, [r2, #0]
 80008c8:	7019      	strb	r1, [r3, #0]
 80008ca:	4608      	mov	r0, r1
 80008cc:	bc10      	pop	{r4}
 80008ce:	4770      	bx	lr

080008d0 <__sfputs_r>:
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d2:	4606      	mov	r6, r0
 80008d4:	460f      	mov	r7, r1
 80008d6:	4614      	mov	r4, r2
 80008d8:	18d5      	adds	r5, r2, r3
 80008da:	42ac      	cmp	r4, r5
 80008dc:	d101      	bne.n	80008e2 <__sfputs_r+0x12>
 80008de:	2000      	movs	r0, #0
 80008e0:	e007      	b.n	80008f2 <__sfputs_r+0x22>
 80008e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008e6:	463a      	mov	r2, r7
 80008e8:	4630      	mov	r0, r6
 80008ea:	f7ff ffdc 	bl	80008a6 <__sfputc_r>
 80008ee:	1c43      	adds	r3, r0, #1
 80008f0:	d1f3      	bne.n	80008da <__sfputs_r+0xa>
 80008f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008f4 <_vfiprintf_r>:
 80008f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f8:	460d      	mov	r5, r1
 80008fa:	b09d      	sub	sp, #116	@ 0x74
 80008fc:	4614      	mov	r4, r2
 80008fe:	4698      	mov	r8, r3
 8000900:	4606      	mov	r6, r0
 8000902:	b118      	cbz	r0, 800090c <_vfiprintf_r+0x18>
 8000904:	6a03      	ldr	r3, [r0, #32]
 8000906:	b90b      	cbnz	r3, 800090c <_vfiprintf_r+0x18>
 8000908:	f7ff fef2 	bl	80006f0 <__sinit>
 800090c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800090e:	07d9      	lsls	r1, r3, #31
 8000910:	d405      	bmi.n	800091e <_vfiprintf_r+0x2a>
 8000912:	89ab      	ldrh	r3, [r5, #12]
 8000914:	059a      	lsls	r2, r3, #22
 8000916:	d402      	bmi.n	800091e <_vfiprintf_r+0x2a>
 8000918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800091a:	f7ff ffc2 	bl	80008a2 <__retarget_lock_acquire_recursive>
 800091e:	89ab      	ldrh	r3, [r5, #12]
 8000920:	071b      	lsls	r3, r3, #28
 8000922:	d501      	bpl.n	8000928 <_vfiprintf_r+0x34>
 8000924:	692b      	ldr	r3, [r5, #16]
 8000926:	b99b      	cbnz	r3, 8000950 <_vfiprintf_r+0x5c>
 8000928:	4629      	mov	r1, r5
 800092a:	4630      	mov	r0, r6
 800092c:	f000 fc5e 	bl	80011ec <__swsetup_r>
 8000930:	b170      	cbz	r0, 8000950 <_vfiprintf_r+0x5c>
 8000932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000934:	07dc      	lsls	r4, r3, #31
 8000936:	d504      	bpl.n	8000942 <_vfiprintf_r+0x4e>
 8000938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800093c:	b01d      	add	sp, #116	@ 0x74
 800093e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000942:	89ab      	ldrh	r3, [r5, #12]
 8000944:	0598      	lsls	r0, r3, #22
 8000946:	d4f7      	bmi.n	8000938 <_vfiprintf_r+0x44>
 8000948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800094a:	f7ff ffab 	bl	80008a4 <__retarget_lock_release_recursive>
 800094e:	e7f3      	b.n	8000938 <_vfiprintf_r+0x44>
 8000950:	2300      	movs	r3, #0
 8000952:	9309      	str	r3, [sp, #36]	@ 0x24
 8000954:	2320      	movs	r3, #32
 8000956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800095a:	f8cd 800c 	str.w	r8, [sp, #12]
 800095e:	2330      	movs	r3, #48	@ 0x30
 8000960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000b10 <_vfiprintf_r+0x21c>
 8000964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000968:	f04f 0901 	mov.w	r9, #1
 800096c:	4623      	mov	r3, r4
 800096e:	469a      	mov	sl, r3
 8000970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000974:	b10a      	cbz	r2, 800097a <_vfiprintf_r+0x86>
 8000976:	2a25      	cmp	r2, #37	@ 0x25
 8000978:	d1f9      	bne.n	800096e <_vfiprintf_r+0x7a>
 800097a:	ebba 0b04 	subs.w	fp, sl, r4
 800097e:	d00b      	beq.n	8000998 <_vfiprintf_r+0xa4>
 8000980:	465b      	mov	r3, fp
 8000982:	4622      	mov	r2, r4
 8000984:	4629      	mov	r1, r5
 8000986:	4630      	mov	r0, r6
 8000988:	f7ff ffa2 	bl	80008d0 <__sfputs_r>
 800098c:	3001      	adds	r0, #1
 800098e:	f000 80a7 	beq.w	8000ae0 <_vfiprintf_r+0x1ec>
 8000992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000994:	445a      	add	r2, fp
 8000996:	9209      	str	r2, [sp, #36]	@ 0x24
 8000998:	f89a 3000 	ldrb.w	r3, [sl]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 809f 	beq.w	8000ae0 <_vfiprintf_r+0x1ec>
 80009a2:	2300      	movs	r3, #0
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009ac:	f10a 0a01 	add.w	sl, sl, #1
 80009b0:	9304      	str	r3, [sp, #16]
 80009b2:	9307      	str	r3, [sp, #28]
 80009b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80009ba:	4654      	mov	r4, sl
 80009bc:	2205      	movs	r2, #5
 80009be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009c2:	4853      	ldr	r0, [pc, #332]	@ (8000b10 <_vfiprintf_r+0x21c>)
 80009c4:	f7ff fc14 	bl	80001f0 <memchr>
 80009c8:	9a04      	ldr	r2, [sp, #16]
 80009ca:	b9d8      	cbnz	r0, 8000a04 <_vfiprintf_r+0x110>
 80009cc:	06d1      	lsls	r1, r2, #27
 80009ce:	bf44      	itt	mi
 80009d0:	2320      	movmi	r3, #32
 80009d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009d6:	0713      	lsls	r3, r2, #28
 80009d8:	bf44      	itt	mi
 80009da:	232b      	movmi	r3, #43	@ 0x2b
 80009dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009e0:	f89a 3000 	ldrb.w	r3, [sl]
 80009e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80009e6:	d015      	beq.n	8000a14 <_vfiprintf_r+0x120>
 80009e8:	9a07      	ldr	r2, [sp, #28]
 80009ea:	4654      	mov	r4, sl
 80009ec:	2000      	movs	r0, #0
 80009ee:	f04f 0c0a 	mov.w	ip, #10
 80009f2:	4621      	mov	r1, r4
 80009f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009f8:	3b30      	subs	r3, #48	@ 0x30
 80009fa:	2b09      	cmp	r3, #9
 80009fc:	d94b      	bls.n	8000a96 <_vfiprintf_r+0x1a2>
 80009fe:	b1b0      	cbz	r0, 8000a2e <_vfiprintf_r+0x13a>
 8000a00:	9207      	str	r2, [sp, #28]
 8000a02:	e014      	b.n	8000a2e <_vfiprintf_r+0x13a>
 8000a04:	eba0 0308 	sub.w	r3, r0, r8
 8000a08:	fa09 f303 	lsl.w	r3, r9, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	9304      	str	r3, [sp, #16]
 8000a10:	46a2      	mov	sl, r4
 8000a12:	e7d2      	b.n	80009ba <_vfiprintf_r+0xc6>
 8000a14:	9b03      	ldr	r3, [sp, #12]
 8000a16:	1d19      	adds	r1, r3, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	9103      	str	r1, [sp, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bfbb      	ittet	lt
 8000a20:	425b      	neglt	r3, r3
 8000a22:	f042 0202 	orrlt.w	r2, r2, #2
 8000a26:	9307      	strge	r3, [sp, #28]
 8000a28:	9307      	strlt	r3, [sp, #28]
 8000a2a:	bfb8      	it	lt
 8000a2c:	9204      	strlt	r2, [sp, #16]
 8000a2e:	7823      	ldrb	r3, [r4, #0]
 8000a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a32:	d10a      	bne.n	8000a4a <_vfiprintf_r+0x156>
 8000a34:	7863      	ldrb	r3, [r4, #1]
 8000a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a38:	d132      	bne.n	8000aa0 <_vfiprintf_r+0x1ac>
 8000a3a:	9b03      	ldr	r3, [sp, #12]
 8000a3c:	1d1a      	adds	r2, r3, #4
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	9203      	str	r2, [sp, #12]
 8000a42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a46:	3402      	adds	r4, #2
 8000a48:	9305      	str	r3, [sp, #20]
 8000a4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000b14 <_vfiprintf_r+0x220>
 8000a4e:	7821      	ldrb	r1, [r4, #0]
 8000a50:	2203      	movs	r2, #3
 8000a52:	4650      	mov	r0, sl
 8000a54:	f7ff fbcc 	bl	80001f0 <memchr>
 8000a58:	b138      	cbz	r0, 8000a6a <_vfiprintf_r+0x176>
 8000a5a:	9b04      	ldr	r3, [sp, #16]
 8000a5c:	eba0 000a 	sub.w	r0, r0, sl
 8000a60:	2240      	movs	r2, #64	@ 0x40
 8000a62:	4082      	lsls	r2, r0
 8000a64:	4313      	orrs	r3, r2
 8000a66:	3401      	adds	r4, #1
 8000a68:	9304      	str	r3, [sp, #16]
 8000a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a6e:	482a      	ldr	r0, [pc, #168]	@ (8000b18 <_vfiprintf_r+0x224>)
 8000a70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a74:	2206      	movs	r2, #6
 8000a76:	f7ff fbbb 	bl	80001f0 <memchr>
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d03f      	beq.n	8000afe <_vfiprintf_r+0x20a>
 8000a7e:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <_vfiprintf_r+0x228>)
 8000a80:	bb1b      	cbnz	r3, 8000aca <_vfiprintf_r+0x1d6>
 8000a82:	9b03      	ldr	r3, [sp, #12]
 8000a84:	3307      	adds	r3, #7
 8000a86:	f023 0307 	bic.w	r3, r3, #7
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	9303      	str	r3, [sp, #12]
 8000a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a90:	443b      	add	r3, r7
 8000a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a94:	e76a      	b.n	800096c <_vfiprintf_r+0x78>
 8000a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	e7a8      	b.n	80009f2 <_vfiprintf_r+0xfe>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	3401      	adds	r4, #1
 8000aa4:	9305      	str	r3, [sp, #20]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 0c0a 	mov.w	ip, #10
 8000aac:	4620      	mov	r0, r4
 8000aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ab2:	3a30      	subs	r2, #48	@ 0x30
 8000ab4:	2a09      	cmp	r2, #9
 8000ab6:	d903      	bls.n	8000ac0 <_vfiprintf_r+0x1cc>
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0c6      	beq.n	8000a4a <_vfiprintf_r+0x156>
 8000abc:	9105      	str	r1, [sp, #20]
 8000abe:	e7c4      	b.n	8000a4a <_vfiprintf_r+0x156>
 8000ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e7f0      	b.n	8000aac <_vfiprintf_r+0x1b8>
 8000aca:	ab03      	add	r3, sp, #12
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	462a      	mov	r2, r5
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <_vfiprintf_r+0x22c>)
 8000ad2:	a904      	add	r1, sp, #16
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4607      	mov	r7, r0
 8000adc:	1c78      	adds	r0, r7, #1
 8000ade:	d1d6      	bne.n	8000a8e <_vfiprintf_r+0x19a>
 8000ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ae2:	07d9      	lsls	r1, r3, #31
 8000ae4:	d405      	bmi.n	8000af2 <_vfiprintf_r+0x1fe>
 8000ae6:	89ab      	ldrh	r3, [r5, #12]
 8000ae8:	059a      	lsls	r2, r3, #22
 8000aea:	d402      	bmi.n	8000af2 <_vfiprintf_r+0x1fe>
 8000aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000aee:	f7ff fed9 	bl	80008a4 <__retarget_lock_release_recursive>
 8000af2:	89ab      	ldrh	r3, [r5, #12]
 8000af4:	065b      	lsls	r3, r3, #25
 8000af6:	f53f af1f 	bmi.w	8000938 <_vfiprintf_r+0x44>
 8000afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000afc:	e71e      	b.n	800093c <_vfiprintf_r+0x48>
 8000afe:	ab03      	add	r3, sp, #12
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	462a      	mov	r2, r5
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <_vfiprintf_r+0x22c>)
 8000b06:	a904      	add	r1, sp, #16
 8000b08:	4630      	mov	r0, r6
 8000b0a:	f000 f91b 	bl	8000d44 <_printf_i>
 8000b0e:	e7e4      	b.n	8000ada <_vfiprintf_r+0x1e6>
 8000b10:	0800161d 	.word	0x0800161d
 8000b14:	08001623 	.word	0x08001623
 8000b18:	08001627 	.word	0x08001627
 8000b1c:	00000000 	.word	0x00000000
 8000b20:	080008d1 	.word	0x080008d1

08000b24 <sbrk_aligned>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	4e0f      	ldr	r6, [pc, #60]	@ (8000b64 <sbrk_aligned+0x40>)
 8000b28:	460c      	mov	r4, r1
 8000b2a:	6831      	ldr	r1, [r6, #0]
 8000b2c:	4605      	mov	r5, r0
 8000b2e:	b911      	cbnz	r1, 8000b36 <sbrk_aligned+0x12>
 8000b30:	f000 fc48 	bl	80013c4 <_sbrk_r>
 8000b34:	6030      	str	r0, [r6, #0]
 8000b36:	4621      	mov	r1, r4
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f000 fc43 	bl	80013c4 <_sbrk_r>
 8000b3e:	1c43      	adds	r3, r0, #1
 8000b40:	d103      	bne.n	8000b4a <sbrk_aligned+0x26>
 8000b42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b46:	4620      	mov	r0, r4
 8000b48:	bd70      	pop	{r4, r5, r6, pc}
 8000b4a:	1cc4      	adds	r4, r0, #3
 8000b4c:	f024 0403 	bic.w	r4, r4, #3
 8000b50:	42a0      	cmp	r0, r4
 8000b52:	d0f8      	beq.n	8000b46 <sbrk_aligned+0x22>
 8000b54:	1a21      	subs	r1, r4, r0
 8000b56:	4628      	mov	r0, r5
 8000b58:	f000 fc34 	bl	80013c4 <_sbrk_r>
 8000b5c:	3001      	adds	r0, #1
 8000b5e:	d1f2      	bne.n	8000b46 <sbrk_aligned+0x22>
 8000b60:	e7ef      	b.n	8000b42 <sbrk_aligned+0x1e>
 8000b62:	bf00      	nop
 8000b64:	200001bc 	.word	0x200001bc

08000b68 <_malloc_r>:
 8000b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b6c:	1ccd      	adds	r5, r1, #3
 8000b6e:	f025 0503 	bic.w	r5, r5, #3
 8000b72:	3508      	adds	r5, #8
 8000b74:	2d0c      	cmp	r5, #12
 8000b76:	bf38      	it	cc
 8000b78:	250c      	movcc	r5, #12
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	4606      	mov	r6, r0
 8000b7e:	db01      	blt.n	8000b84 <_malloc_r+0x1c>
 8000b80:	42a9      	cmp	r1, r5
 8000b82:	d904      	bls.n	8000b8e <_malloc_r+0x26>
 8000b84:	230c      	movs	r3, #12
 8000b86:	6033      	str	r3, [r6, #0]
 8000b88:	2000      	movs	r0, #0
 8000b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c64 <_malloc_r+0xfc>
 8000b92:	f000 fa9d 	bl	80010d0 <__malloc_lock>
 8000b96:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9a:	461c      	mov	r4, r3
 8000b9c:	bb44      	cbnz	r4, 8000bf0 <_malloc_r+0x88>
 8000b9e:	4629      	mov	r1, r5
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f7ff ffbf 	bl	8000b24 <sbrk_aligned>
 8000ba6:	1c43      	adds	r3, r0, #1
 8000ba8:	4604      	mov	r4, r0
 8000baa:	d158      	bne.n	8000c5e <_malloc_r+0xf6>
 8000bac:	f8d8 4000 	ldr.w	r4, [r8]
 8000bb0:	4627      	mov	r7, r4
 8000bb2:	2f00      	cmp	r7, #0
 8000bb4:	d143      	bne.n	8000c3e <_malloc_r+0xd6>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d04b      	beq.n	8000c52 <_malloc_r+0xea>
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	eb04 0903 	add.w	r9, r4, r3
 8000bc4:	f000 fbfe 	bl	80013c4 <_sbrk_r>
 8000bc8:	4581      	cmp	r9, r0
 8000bca:	d142      	bne.n	8000c52 <_malloc_r+0xea>
 8000bcc:	6821      	ldr	r1, [r4, #0]
 8000bce:	1a6d      	subs	r5, r5, r1
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f7ff ffa6 	bl	8000b24 <sbrk_aligned>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	d03a      	beq.n	8000c52 <_malloc_r+0xea>
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	442b      	add	r3, r5
 8000be0:	6023      	str	r3, [r4, #0]
 8000be2:	f8d8 3000 	ldr.w	r3, [r8]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	bb62      	cbnz	r2, 8000c44 <_malloc_r+0xdc>
 8000bea:	f8c8 7000 	str.w	r7, [r8]
 8000bee:	e00f      	b.n	8000c10 <_malloc_r+0xa8>
 8000bf0:	6822      	ldr	r2, [r4, #0]
 8000bf2:	1b52      	subs	r2, r2, r5
 8000bf4:	d420      	bmi.n	8000c38 <_malloc_r+0xd0>
 8000bf6:	2a0b      	cmp	r2, #11
 8000bf8:	d917      	bls.n	8000c2a <_malloc_r+0xc2>
 8000bfa:	1961      	adds	r1, r4, r5
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	6025      	str	r5, [r4, #0]
 8000c00:	bf18      	it	ne
 8000c02:	6059      	strne	r1, [r3, #4]
 8000c04:	6863      	ldr	r3, [r4, #4]
 8000c06:	bf08      	it	eq
 8000c08:	f8c8 1000 	streq.w	r1, [r8]
 8000c0c:	5162      	str	r2, [r4, r5]
 8000c0e:	604b      	str	r3, [r1, #4]
 8000c10:	4630      	mov	r0, r6
 8000c12:	f000 fa63 	bl	80010dc <__malloc_unlock>
 8000c16:	f104 000b 	add.w	r0, r4, #11
 8000c1a:	1d23      	adds	r3, r4, #4
 8000c1c:	f020 0007 	bic.w	r0, r0, #7
 8000c20:	1ac2      	subs	r2, r0, r3
 8000c22:	bf1c      	itt	ne
 8000c24:	1a1b      	subne	r3, r3, r0
 8000c26:	50a3      	strne	r3, [r4, r2]
 8000c28:	e7af      	b.n	8000b8a <_malloc_r+0x22>
 8000c2a:	6862      	ldr	r2, [r4, #4]
 8000c2c:	42a3      	cmp	r3, r4
 8000c2e:	bf0c      	ite	eq
 8000c30:	f8c8 2000 	streq.w	r2, [r8]
 8000c34:	605a      	strne	r2, [r3, #4]
 8000c36:	e7eb      	b.n	8000c10 <_malloc_r+0xa8>
 8000c38:	4623      	mov	r3, r4
 8000c3a:	6864      	ldr	r4, [r4, #4]
 8000c3c:	e7ae      	b.n	8000b9c <_malloc_r+0x34>
 8000c3e:	463c      	mov	r4, r7
 8000c40:	687f      	ldr	r7, [r7, #4]
 8000c42:	e7b6      	b.n	8000bb2 <_malloc_r+0x4a>
 8000c44:	461a      	mov	r2, r3
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	42a3      	cmp	r3, r4
 8000c4a:	d1fb      	bne.n	8000c44 <_malloc_r+0xdc>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6053      	str	r3, [r2, #4]
 8000c50:	e7de      	b.n	8000c10 <_malloc_r+0xa8>
 8000c52:	230c      	movs	r3, #12
 8000c54:	6033      	str	r3, [r6, #0]
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 fa40 	bl	80010dc <__malloc_unlock>
 8000c5c:	e794      	b.n	8000b88 <_malloc_r+0x20>
 8000c5e:	6005      	str	r5, [r0, #0]
 8000c60:	e7d6      	b.n	8000c10 <_malloc_r+0xa8>
 8000c62:	bf00      	nop
 8000c64:	200001c0 	.word	0x200001c0

08000c68 <_printf_common>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	4616      	mov	r6, r2
 8000c6e:	4698      	mov	r8, r3
 8000c70:	688a      	ldr	r2, [r1, #8]
 8000c72:	690b      	ldr	r3, [r1, #16]
 8000c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	bfb8      	it	lt
 8000c7c:	4613      	movlt	r3, r2
 8000c7e:	6033      	str	r3, [r6, #0]
 8000c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c84:	4607      	mov	r7, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	b10a      	cbz	r2, 8000c8e <_printf_common+0x26>
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	6033      	str	r3, [r6, #0]
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	0699      	lsls	r1, r3, #26
 8000c92:	bf42      	ittt	mi
 8000c94:	6833      	ldrmi	r3, [r6, #0]
 8000c96:	3302      	addmi	r3, #2
 8000c98:	6033      	strmi	r3, [r6, #0]
 8000c9a:	6825      	ldr	r5, [r4, #0]
 8000c9c:	f015 0506 	ands.w	r5, r5, #6
 8000ca0:	d106      	bne.n	8000cb0 <_printf_common+0x48>
 8000ca2:	f104 0a19 	add.w	sl, r4, #25
 8000ca6:	68e3      	ldr	r3, [r4, #12]
 8000ca8:	6832      	ldr	r2, [r6, #0]
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	dc26      	bgt.n	8000cfe <_printf_common+0x96>
 8000cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cb4:	6822      	ldr	r2, [r4, #0]
 8000cb6:	3b00      	subs	r3, #0
 8000cb8:	bf18      	it	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	0692      	lsls	r2, r2, #26
 8000cbe:	d42b      	bmi.n	8000d18 <_printf_common+0xb0>
 8000cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cc4:	4641      	mov	r1, r8
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	47c8      	blx	r9
 8000cca:	3001      	adds	r0, #1
 8000ccc:	d01e      	beq.n	8000d0c <_printf_common+0xa4>
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	6922      	ldr	r2, [r4, #16]
 8000cd2:	f003 0306 	and.w	r3, r3, #6
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf02      	ittt	eq
 8000cda:	68e5      	ldreq	r5, [r4, #12]
 8000cdc:	6833      	ldreq	r3, [r6, #0]
 8000cde:	1aed      	subeq	r5, r5, r3
 8000ce0:	68a3      	ldr	r3, [r4, #8]
 8000ce2:	bf0c      	ite	eq
 8000ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ce8:	2500      	movne	r5, #0
 8000cea:	4293      	cmp	r3, r2
 8000cec:	bfc4      	itt	gt
 8000cee:	1a9b      	subgt	r3, r3, r2
 8000cf0:	18ed      	addgt	r5, r5, r3
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	341a      	adds	r4, #26
 8000cf6:	42b5      	cmp	r5, r6
 8000cf8:	d11a      	bne.n	8000d30 <_printf_common+0xc8>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	e008      	b.n	8000d10 <_printf_common+0xa8>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4652      	mov	r2, sl
 8000d02:	4641      	mov	r1, r8
 8000d04:	4638      	mov	r0, r7
 8000d06:	47c8      	blx	r9
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d103      	bne.n	8000d14 <_printf_common+0xac>
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	3501      	adds	r5, #1
 8000d16:	e7c6      	b.n	8000ca6 <_printf_common+0x3e>
 8000d18:	18e1      	adds	r1, r4, r3
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	2030      	movs	r0, #48	@ 0x30
 8000d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d22:	4422      	add	r2, r4
 8000d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	e7c7      	b.n	8000cc0 <_printf_common+0x58>
 8000d30:	2301      	movs	r3, #1
 8000d32:	4622      	mov	r2, r4
 8000d34:	4641      	mov	r1, r8
 8000d36:	4638      	mov	r0, r7
 8000d38:	47c8      	blx	r9
 8000d3a:	3001      	adds	r0, #1
 8000d3c:	d0e6      	beq.n	8000d0c <_printf_common+0xa4>
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7d9      	b.n	8000cf6 <_printf_common+0x8e>
	...

08000d44 <_printf_i>:
 8000d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	7e0f      	ldrb	r7, [r1, #24]
 8000d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d4c:	2f78      	cmp	r7, #120	@ 0x78
 8000d4e:	4691      	mov	r9, r2
 8000d50:	4680      	mov	r8, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	469a      	mov	sl, r3
 8000d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d5a:	d807      	bhi.n	8000d6c <_printf_i+0x28>
 8000d5c:	2f62      	cmp	r7, #98	@ 0x62
 8000d5e:	d80a      	bhi.n	8000d76 <_printf_i+0x32>
 8000d60:	2f00      	cmp	r7, #0
 8000d62:	f000 80d1 	beq.w	8000f08 <_printf_i+0x1c4>
 8000d66:	2f58      	cmp	r7, #88	@ 0x58
 8000d68:	f000 80b8 	beq.w	8000edc <_printf_i+0x198>
 8000d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d74:	e03a      	b.n	8000dec <_printf_i+0xa8>
 8000d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d7a:	2b15      	cmp	r3, #21
 8000d7c:	d8f6      	bhi.n	8000d6c <_printf_i+0x28>
 8000d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d84 <_printf_i+0x40>)
 8000d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d84:	08000ddd 	.word	0x08000ddd
 8000d88:	08000df1 	.word	0x08000df1
 8000d8c:	08000d6d 	.word	0x08000d6d
 8000d90:	08000d6d 	.word	0x08000d6d
 8000d94:	08000d6d 	.word	0x08000d6d
 8000d98:	08000d6d 	.word	0x08000d6d
 8000d9c:	08000df1 	.word	0x08000df1
 8000da0:	08000d6d 	.word	0x08000d6d
 8000da4:	08000d6d 	.word	0x08000d6d
 8000da8:	08000d6d 	.word	0x08000d6d
 8000dac:	08000d6d 	.word	0x08000d6d
 8000db0:	08000eef 	.word	0x08000eef
 8000db4:	08000e1b 	.word	0x08000e1b
 8000db8:	08000ea9 	.word	0x08000ea9
 8000dbc:	08000d6d 	.word	0x08000d6d
 8000dc0:	08000d6d 	.word	0x08000d6d
 8000dc4:	08000f11 	.word	0x08000f11
 8000dc8:	08000d6d 	.word	0x08000d6d
 8000dcc:	08000e1b 	.word	0x08000e1b
 8000dd0:	08000d6d 	.word	0x08000d6d
 8000dd4:	08000d6d 	.word	0x08000d6d
 8000dd8:	08000eb1 	.word	0x08000eb1
 8000ddc:	6833      	ldr	r3, [r6, #0]
 8000dde:	1d1a      	adds	r2, r3, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6032      	str	r2, [r6, #0]
 8000de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000dec:	2301      	movs	r3, #1
 8000dee:	e09c      	b.n	8000f2a <_printf_i+0x1e6>
 8000df0:	6833      	ldr	r3, [r6, #0]
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	1d19      	adds	r1, r3, #4
 8000df6:	6031      	str	r1, [r6, #0]
 8000df8:	0606      	lsls	r6, r0, #24
 8000dfa:	d501      	bpl.n	8000e00 <_printf_i+0xbc>
 8000dfc:	681d      	ldr	r5, [r3, #0]
 8000dfe:	e003      	b.n	8000e08 <_printf_i+0xc4>
 8000e00:	0645      	lsls	r5, r0, #25
 8000e02:	d5fb      	bpl.n	8000dfc <_printf_i+0xb8>
 8000e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	da03      	bge.n	8000e14 <_printf_i+0xd0>
 8000e0c:	232d      	movs	r3, #45	@ 0x2d
 8000e0e:	426d      	negs	r5, r5
 8000e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e14:	4858      	ldr	r0, [pc, #352]	@ (8000f78 <_printf_i+0x234>)
 8000e16:	230a      	movs	r3, #10
 8000e18:	e011      	b.n	8000e3e <_printf_i+0xfa>
 8000e1a:	6821      	ldr	r1, [r4, #0]
 8000e1c:	6833      	ldr	r3, [r6, #0]
 8000e1e:	0608      	lsls	r0, r1, #24
 8000e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e24:	d402      	bmi.n	8000e2c <_printf_i+0xe8>
 8000e26:	0649      	lsls	r1, r1, #25
 8000e28:	bf48      	it	mi
 8000e2a:	b2ad      	uxthmi	r5, r5
 8000e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e2e:	4852      	ldr	r0, [pc, #328]	@ (8000f78 <_printf_i+0x234>)
 8000e30:	6033      	str	r3, [r6, #0]
 8000e32:	bf14      	ite	ne
 8000e34:	230a      	movne	r3, #10
 8000e36:	2308      	moveq	r3, #8
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e3e:	6866      	ldr	r6, [r4, #4]
 8000e40:	60a6      	str	r6, [r4, #8]
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	db05      	blt.n	8000e52 <_printf_i+0x10e>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	432e      	orrs	r6, r5
 8000e4a:	f021 0104 	bic.w	r1, r1, #4
 8000e4e:	6021      	str	r1, [r4, #0]
 8000e50:	d04b      	beq.n	8000eea <_printf_i+0x1a6>
 8000e52:	4616      	mov	r6, r2
 8000e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e58:	fb03 5711 	mls	r7, r3, r1, r5
 8000e5c:	5dc7      	ldrb	r7, [r0, r7]
 8000e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e62:	462f      	mov	r7, r5
 8000e64:	42bb      	cmp	r3, r7
 8000e66:	460d      	mov	r5, r1
 8000e68:	d9f4      	bls.n	8000e54 <_printf_i+0x110>
 8000e6a:	2b08      	cmp	r3, #8
 8000e6c:	d10b      	bne.n	8000e86 <_printf_i+0x142>
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	07df      	lsls	r7, r3, #31
 8000e72:	d508      	bpl.n	8000e86 <_printf_i+0x142>
 8000e74:	6923      	ldr	r3, [r4, #16]
 8000e76:	6861      	ldr	r1, [r4, #4]
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	bfde      	ittt	le
 8000e7c:	2330      	movle	r3, #48	@ 0x30
 8000e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e82:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e86:	1b92      	subs	r2, r2, r6
 8000e88:	6122      	str	r2, [r4, #16]
 8000e8a:	f8cd a000 	str.w	sl, [sp]
 8000e8e:	464b      	mov	r3, r9
 8000e90:	aa03      	add	r2, sp, #12
 8000e92:	4621      	mov	r1, r4
 8000e94:	4640      	mov	r0, r8
 8000e96:	f7ff fee7 	bl	8000c68 <_printf_common>
 8000e9a:	3001      	adds	r0, #1
 8000e9c:	d14a      	bne.n	8000f34 <_printf_i+0x1f0>
 8000e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea2:	b004      	add	sp, #16
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	f043 0320 	orr.w	r3, r3, #32
 8000eae:	6023      	str	r3, [r4, #0]
 8000eb0:	4832      	ldr	r0, [pc, #200]	@ (8000f7c <_printf_i+0x238>)
 8000eb2:	2778      	movs	r7, #120	@ 0x78
 8000eb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	6831      	ldr	r1, [r6, #0]
 8000ebc:	061f      	lsls	r7, r3, #24
 8000ebe:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ec2:	d402      	bmi.n	8000eca <_printf_i+0x186>
 8000ec4:	065f      	lsls	r7, r3, #25
 8000ec6:	bf48      	it	mi
 8000ec8:	b2ad      	uxthmi	r5, r5
 8000eca:	6031      	str	r1, [r6, #0]
 8000ecc:	07d9      	lsls	r1, r3, #31
 8000ece:	bf44      	itt	mi
 8000ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8000ed4:	6023      	strmi	r3, [r4, #0]
 8000ed6:	b11d      	cbz	r5, 8000ee0 <_printf_i+0x19c>
 8000ed8:	2310      	movs	r3, #16
 8000eda:	e7ad      	b.n	8000e38 <_printf_i+0xf4>
 8000edc:	4826      	ldr	r0, [pc, #152]	@ (8000f78 <_printf_i+0x234>)
 8000ede:	e7e9      	b.n	8000eb4 <_printf_i+0x170>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	f023 0320 	bic.w	r3, r3, #32
 8000ee6:	6023      	str	r3, [r4, #0]
 8000ee8:	e7f6      	b.n	8000ed8 <_printf_i+0x194>
 8000eea:	4616      	mov	r6, r2
 8000eec:	e7bd      	b.n	8000e6a <_printf_i+0x126>
 8000eee:	6833      	ldr	r3, [r6, #0]
 8000ef0:	6825      	ldr	r5, [r4, #0]
 8000ef2:	6961      	ldr	r1, [r4, #20]
 8000ef4:	1d18      	adds	r0, r3, #4
 8000ef6:	6030      	str	r0, [r6, #0]
 8000ef8:	062e      	lsls	r6, r5, #24
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	d501      	bpl.n	8000f02 <_printf_i+0x1be>
 8000efe:	6019      	str	r1, [r3, #0]
 8000f00:	e002      	b.n	8000f08 <_printf_i+0x1c4>
 8000f02:	0668      	lsls	r0, r5, #25
 8000f04:	d5fb      	bpl.n	8000efe <_printf_i+0x1ba>
 8000f06:	8019      	strh	r1, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6123      	str	r3, [r4, #16]
 8000f0c:	4616      	mov	r6, r2
 8000f0e:	e7bc      	b.n	8000e8a <_printf_i+0x146>
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	1d1a      	adds	r2, r3, #4
 8000f14:	6032      	str	r2, [r6, #0]
 8000f16:	681e      	ldr	r6, [r3, #0]
 8000f18:	6862      	ldr	r2, [r4, #4]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f7ff f967 	bl	80001f0 <memchr>
 8000f22:	b108      	cbz	r0, 8000f28 <_printf_i+0x1e4>
 8000f24:	1b80      	subs	r0, r0, r6
 8000f26:	6060      	str	r0, [r4, #4]
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	6123      	str	r3, [r4, #16]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f32:	e7aa      	b.n	8000e8a <_printf_i+0x146>
 8000f34:	6923      	ldr	r3, [r4, #16]
 8000f36:	4632      	mov	r2, r6
 8000f38:	4649      	mov	r1, r9
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	47d0      	blx	sl
 8000f3e:	3001      	adds	r0, #1
 8000f40:	d0ad      	beq.n	8000e9e <_printf_i+0x15a>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	079b      	lsls	r3, r3, #30
 8000f46:	d413      	bmi.n	8000f70 <_printf_i+0x22c>
 8000f48:	68e0      	ldr	r0, [r4, #12]
 8000f4a:	9b03      	ldr	r3, [sp, #12]
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	bfb8      	it	lt
 8000f50:	4618      	movlt	r0, r3
 8000f52:	e7a6      	b.n	8000ea2 <_printf_i+0x15e>
 8000f54:	2301      	movs	r3, #1
 8000f56:	4632      	mov	r2, r6
 8000f58:	4649      	mov	r1, r9
 8000f5a:	4640      	mov	r0, r8
 8000f5c:	47d0      	blx	sl
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d09d      	beq.n	8000e9e <_printf_i+0x15a>
 8000f62:	3501      	adds	r5, #1
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	9903      	ldr	r1, [sp, #12]
 8000f68:	1a5b      	subs	r3, r3, r1
 8000f6a:	42ab      	cmp	r3, r5
 8000f6c:	dcf2      	bgt.n	8000f54 <_printf_i+0x210>
 8000f6e:	e7eb      	b.n	8000f48 <_printf_i+0x204>
 8000f70:	2500      	movs	r5, #0
 8000f72:	f104 0619 	add.w	r6, r4, #25
 8000f76:	e7f5      	b.n	8000f64 <_printf_i+0x220>
 8000f78:	0800162e 	.word	0x0800162e
 8000f7c:	0800163f 	.word	0x0800163f

08000f80 <__sflush_r>:
 8000f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	0716      	lsls	r6, r2, #28
 8000f88:	4605      	mov	r5, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	d454      	bmi.n	8001038 <__sflush_r+0xb8>
 8000f8e:	684b      	ldr	r3, [r1, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dc02      	bgt.n	8000f9a <__sflush_r+0x1a>
 8000f94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	dd48      	ble.n	800102c <__sflush_r+0xac>
 8000f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d045      	beq.n	800102c <__sflush_r+0xac>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000fa6:	682f      	ldr	r7, [r5, #0]
 8000fa8:	6a21      	ldr	r1, [r4, #32]
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	d030      	beq.n	8001010 <__sflush_r+0x90>
 8000fae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000fb0:	89a3      	ldrh	r3, [r4, #12]
 8000fb2:	0759      	lsls	r1, r3, #29
 8000fb4:	d505      	bpl.n	8000fc2 <__sflush_r+0x42>
 8000fb6:	6863      	ldr	r3, [r4, #4]
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000fbc:	b10b      	cbz	r3, 8000fc2 <__sflush_r+0x42>
 8000fbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fc0:	1ad2      	subs	r2, r2, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fc6:	6a21      	ldr	r1, [r4, #32]
 8000fc8:	4628      	mov	r0, r5
 8000fca:	47b0      	blx	r6
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	89a3      	ldrh	r3, [r4, #12]
 8000fd0:	d106      	bne.n	8000fe0 <__sflush_r+0x60>
 8000fd2:	6829      	ldr	r1, [r5, #0]
 8000fd4:	291d      	cmp	r1, #29
 8000fd6:	d82b      	bhi.n	8001030 <__sflush_r+0xb0>
 8000fd8:	4a28      	ldr	r2, [pc, #160]	@ (800107c <__sflush_r+0xfc>)
 8000fda:	40ca      	lsrs	r2, r1
 8000fdc:	07d6      	lsls	r6, r2, #31
 8000fde:	d527      	bpl.n	8001030 <__sflush_r+0xb0>
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6062      	str	r2, [r4, #4]
 8000fe4:	04d9      	lsls	r1, r3, #19
 8000fe6:	6922      	ldr	r2, [r4, #16]
 8000fe8:	6022      	str	r2, [r4, #0]
 8000fea:	d504      	bpl.n	8000ff6 <__sflush_r+0x76>
 8000fec:	1c42      	adds	r2, r0, #1
 8000fee:	d101      	bne.n	8000ff4 <__sflush_r+0x74>
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	b903      	cbnz	r3, 8000ff6 <__sflush_r+0x76>
 8000ff4:	6560      	str	r0, [r4, #84]	@ 0x54
 8000ff6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ff8:	602f      	str	r7, [r5, #0]
 8000ffa:	b1b9      	cbz	r1, 800102c <__sflush_r+0xac>
 8000ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001000:	4299      	cmp	r1, r3
 8001002:	d002      	beq.n	800100a <__sflush_r+0x8a>
 8001004:	4628      	mov	r0, r5
 8001006:	f000 fa21 	bl	800144c <_free_r>
 800100a:	2300      	movs	r3, #0
 800100c:	6363      	str	r3, [r4, #52]	@ 0x34
 800100e:	e00d      	b.n	800102c <__sflush_r+0xac>
 8001010:	2301      	movs	r3, #1
 8001012:	4628      	mov	r0, r5
 8001014:	47b0      	blx	r6
 8001016:	4602      	mov	r2, r0
 8001018:	1c50      	adds	r0, r2, #1
 800101a:	d1c9      	bne.n	8000fb0 <__sflush_r+0x30>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0c6      	beq.n	8000fb0 <__sflush_r+0x30>
 8001022:	2b1d      	cmp	r3, #29
 8001024:	d001      	beq.n	800102a <__sflush_r+0xaa>
 8001026:	2b16      	cmp	r3, #22
 8001028:	d11d      	bne.n	8001066 <__sflush_r+0xe6>
 800102a:	602f      	str	r7, [r5, #0]
 800102c:	2000      	movs	r0, #0
 800102e:	e021      	b.n	8001074 <__sflush_r+0xf4>
 8001030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001034:	b21b      	sxth	r3, r3
 8001036:	e01a      	b.n	800106e <__sflush_r+0xee>
 8001038:	690f      	ldr	r7, [r1, #16]
 800103a:	2f00      	cmp	r7, #0
 800103c:	d0f6      	beq.n	800102c <__sflush_r+0xac>
 800103e:	0793      	lsls	r3, r2, #30
 8001040:	680e      	ldr	r6, [r1, #0]
 8001042:	bf08      	it	eq
 8001044:	694b      	ldreq	r3, [r1, #20]
 8001046:	600f      	str	r7, [r1, #0]
 8001048:	bf18      	it	ne
 800104a:	2300      	movne	r3, #0
 800104c:	1bf6      	subs	r6, r6, r7
 800104e:	608b      	str	r3, [r1, #8]
 8001050:	2e00      	cmp	r6, #0
 8001052:	ddeb      	ble.n	800102c <__sflush_r+0xac>
 8001054:	6a21      	ldr	r1, [r4, #32]
 8001056:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800105a:	4633      	mov	r3, r6
 800105c:	463a      	mov	r2, r7
 800105e:	4628      	mov	r0, r5
 8001060:	47e0      	blx	ip
 8001062:	2800      	cmp	r0, #0
 8001064:	dc07      	bgt.n	8001076 <__sflush_r+0xf6>
 8001066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800106a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800106e:	81a3      	strh	r3, [r4, #12]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001076:	4407      	add	r7, r0
 8001078:	1a36      	subs	r6, r6, r0
 800107a:	e7e9      	b.n	8001050 <__sflush_r+0xd0>
 800107c:	20400001 	.word	0x20400001

08001080 <_fflush_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	690b      	ldr	r3, [r1, #16]
 8001084:	4605      	mov	r5, r0
 8001086:	460c      	mov	r4, r1
 8001088:	b913      	cbnz	r3, 8001090 <_fflush_r+0x10>
 800108a:	2500      	movs	r5, #0
 800108c:	4628      	mov	r0, r5
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	b118      	cbz	r0, 800109a <_fflush_r+0x1a>
 8001092:	6a03      	ldr	r3, [r0, #32]
 8001094:	b90b      	cbnz	r3, 800109a <_fflush_r+0x1a>
 8001096:	f7ff fb2b 	bl	80006f0 <__sinit>
 800109a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f3      	beq.n	800108a <_fflush_r+0xa>
 80010a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80010a4:	07d0      	lsls	r0, r2, #31
 80010a6:	d404      	bmi.n	80010b2 <_fflush_r+0x32>
 80010a8:	0599      	lsls	r1, r3, #22
 80010aa:	d402      	bmi.n	80010b2 <_fflush_r+0x32>
 80010ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010ae:	f7ff fbf8 	bl	80008a2 <__retarget_lock_acquire_recursive>
 80010b2:	4628      	mov	r0, r5
 80010b4:	4621      	mov	r1, r4
 80010b6:	f7ff ff63 	bl	8000f80 <__sflush_r>
 80010ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010bc:	07da      	lsls	r2, r3, #31
 80010be:	4605      	mov	r5, r0
 80010c0:	d4e4      	bmi.n	800108c <_fflush_r+0xc>
 80010c2:	89a3      	ldrh	r3, [r4, #12]
 80010c4:	059b      	lsls	r3, r3, #22
 80010c6:	d4e1      	bmi.n	800108c <_fflush_r+0xc>
 80010c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010ca:	f7ff fbeb 	bl	80008a4 <__retarget_lock_release_recursive>
 80010ce:	e7dd      	b.n	800108c <_fflush_r+0xc>

080010d0 <__malloc_lock>:
 80010d0:	4801      	ldr	r0, [pc, #4]	@ (80010d8 <__malloc_lock+0x8>)
 80010d2:	f7ff bbe6 	b.w	80008a2 <__retarget_lock_acquire_recursive>
 80010d6:	bf00      	nop
 80010d8:	200001b8 	.word	0x200001b8

080010dc <__malloc_unlock>:
 80010dc:	4801      	ldr	r0, [pc, #4]	@ (80010e4 <__malloc_unlock+0x8>)
 80010de:	f7ff bbe1 	b.w	80008a4 <__retarget_lock_release_recursive>
 80010e2:	bf00      	nop
 80010e4:	200001b8 	.word	0x200001b8

080010e8 <__sread>:
 80010e8:	b510      	push	{r4, lr}
 80010ea:	460c      	mov	r4, r1
 80010ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f0:	f000 f956 	bl	80013a0 <_read_r>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	bfab      	itete	ge
 80010f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010fa:	89a3      	ldrhlt	r3, [r4, #12]
 80010fc:	181b      	addge	r3, r3, r0
 80010fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001102:	bfac      	ite	ge
 8001104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001106:	81a3      	strhlt	r3, [r4, #12]
 8001108:	bd10      	pop	{r4, pc}

0800110a <__swrite>:
 800110a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800110e:	461f      	mov	r7, r3
 8001110:	898b      	ldrh	r3, [r1, #12]
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	4605      	mov	r5, r0
 8001116:	460c      	mov	r4, r1
 8001118:	4616      	mov	r6, r2
 800111a:	d505      	bpl.n	8001128 <__swrite+0x1e>
 800111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001120:	2302      	movs	r3, #2
 8001122:	2200      	movs	r2, #0
 8001124:	f000 f92a 	bl	800137c <_lseek_r>
 8001128:	89a3      	ldrh	r3, [r4, #12]
 800112a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800112e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001132:	81a3      	strh	r3, [r4, #12]
 8001134:	4632      	mov	r2, r6
 8001136:	463b      	mov	r3, r7
 8001138:	4628      	mov	r0, r5
 800113a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800113e:	f000 b951 	b.w	80013e4 <_write_r>

08001142 <__sseek>:
 8001142:	b510      	push	{r4, lr}
 8001144:	460c      	mov	r4, r1
 8001146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800114a:	f000 f917 	bl	800137c <_lseek_r>
 800114e:	1c43      	adds	r3, r0, #1
 8001150:	89a3      	ldrh	r3, [r4, #12]
 8001152:	bf15      	itete	ne
 8001154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800115a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800115e:	81a3      	strheq	r3, [r4, #12]
 8001160:	bf18      	it	ne
 8001162:	81a3      	strhne	r3, [r4, #12]
 8001164:	bd10      	pop	{r4, pc}

08001166 <__sclose>:
 8001166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116a:	f000 b94d 	b.w	8001408 <_close_r>

0800116e <__swbuf_r>:
 800116e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001170:	460e      	mov	r6, r1
 8001172:	4614      	mov	r4, r2
 8001174:	4605      	mov	r5, r0
 8001176:	b118      	cbz	r0, 8001180 <__swbuf_r+0x12>
 8001178:	6a03      	ldr	r3, [r0, #32]
 800117a:	b90b      	cbnz	r3, 8001180 <__swbuf_r+0x12>
 800117c:	f7ff fab8 	bl	80006f0 <__sinit>
 8001180:	69a3      	ldr	r3, [r4, #24]
 8001182:	60a3      	str	r3, [r4, #8]
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	071a      	lsls	r2, r3, #28
 8001188:	d501      	bpl.n	800118e <__swbuf_r+0x20>
 800118a:	6923      	ldr	r3, [r4, #16]
 800118c:	b943      	cbnz	r3, 80011a0 <__swbuf_r+0x32>
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	f000 f82b 	bl	80011ec <__swsetup_r>
 8001196:	b118      	cbz	r0, 80011a0 <__swbuf_r+0x32>
 8001198:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800119c:	4638      	mov	r0, r7
 800119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	6922      	ldr	r2, [r4, #16]
 80011a4:	1a98      	subs	r0, r3, r2
 80011a6:	6963      	ldr	r3, [r4, #20]
 80011a8:	b2f6      	uxtb	r6, r6
 80011aa:	4283      	cmp	r3, r0
 80011ac:	4637      	mov	r7, r6
 80011ae:	dc05      	bgt.n	80011bc <__swbuf_r+0x4e>
 80011b0:	4621      	mov	r1, r4
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff ff64 	bl	8001080 <_fflush_r>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1ed      	bne.n	8001198 <__swbuf_r+0x2a>
 80011bc:	68a3      	ldr	r3, [r4, #8]
 80011be:	3b01      	subs	r3, #1
 80011c0:	60a3      	str	r3, [r4, #8]
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	6022      	str	r2, [r4, #0]
 80011c8:	701e      	strb	r6, [r3, #0]
 80011ca:	6962      	ldr	r2, [r4, #20]
 80011cc:	1c43      	adds	r3, r0, #1
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d004      	beq.n	80011dc <__swbuf_r+0x6e>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	07db      	lsls	r3, r3, #31
 80011d6:	d5e1      	bpl.n	800119c <__swbuf_r+0x2e>
 80011d8:	2e0a      	cmp	r6, #10
 80011da:	d1df      	bne.n	800119c <__swbuf_r+0x2e>
 80011dc:	4621      	mov	r1, r4
 80011de:	4628      	mov	r0, r5
 80011e0:	f7ff ff4e 	bl	8001080 <_fflush_r>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0d9      	beq.n	800119c <__swbuf_r+0x2e>
 80011e8:	e7d6      	b.n	8001198 <__swbuf_r+0x2a>
	...

080011ec <__swsetup_r>:
 80011ec:	b538      	push	{r3, r4, r5, lr}
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <__swsetup_r+0xa8>)
 80011f0:	4605      	mov	r5, r0
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	460c      	mov	r4, r1
 80011f6:	b118      	cbz	r0, 8001200 <__swsetup_r+0x14>
 80011f8:	6a03      	ldr	r3, [r0, #32]
 80011fa:	b90b      	cbnz	r3, 8001200 <__swsetup_r+0x14>
 80011fc:	f7ff fa78 	bl	80006f0 <__sinit>
 8001200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001204:	0719      	lsls	r1, r3, #28
 8001206:	d422      	bmi.n	800124e <__swsetup_r+0x62>
 8001208:	06da      	lsls	r2, r3, #27
 800120a:	d407      	bmi.n	800121c <__swsetup_r+0x30>
 800120c:	2209      	movs	r2, #9
 800120e:	602a      	str	r2, [r5, #0]
 8001210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001214:	81a3      	strh	r3, [r4, #12]
 8001216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800121a:	e033      	b.n	8001284 <__swsetup_r+0x98>
 800121c:	0758      	lsls	r0, r3, #29
 800121e:	d512      	bpl.n	8001246 <__swsetup_r+0x5a>
 8001220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001222:	b141      	cbz	r1, 8001236 <__swsetup_r+0x4a>
 8001224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001228:	4299      	cmp	r1, r3
 800122a:	d002      	beq.n	8001232 <__swsetup_r+0x46>
 800122c:	4628      	mov	r0, r5
 800122e:	f000 f90d 	bl	800144c <_free_r>
 8001232:	2300      	movs	r3, #0
 8001234:	6363      	str	r3, [r4, #52]	@ 0x34
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	2300      	movs	r3, #0
 8001240:	6063      	str	r3, [r4, #4]
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	6923      	ldr	r3, [r4, #16]
 8001250:	b94b      	cbnz	r3, 8001266 <__swsetup_r+0x7a>
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800125c:	d003      	beq.n	8001266 <__swsetup_r+0x7a>
 800125e:	4621      	mov	r1, r4
 8001260:	4628      	mov	r0, r5
 8001262:	f000 f83f 	bl	80012e4 <__smakebuf_r>
 8001266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800126a:	f013 0201 	ands.w	r2, r3, #1
 800126e:	d00a      	beq.n	8001286 <__swsetup_r+0x9a>
 8001270:	2200      	movs	r2, #0
 8001272:	60a2      	str	r2, [r4, #8]
 8001274:	6962      	ldr	r2, [r4, #20]
 8001276:	4252      	negs	r2, r2
 8001278:	61a2      	str	r2, [r4, #24]
 800127a:	6922      	ldr	r2, [r4, #16]
 800127c:	b942      	cbnz	r2, 8001290 <__swsetup_r+0xa4>
 800127e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001282:	d1c5      	bne.n	8001210 <__swsetup_r+0x24>
 8001284:	bd38      	pop	{r3, r4, r5, pc}
 8001286:	0799      	lsls	r1, r3, #30
 8001288:	bf58      	it	pl
 800128a:	6962      	ldrpl	r2, [r4, #20]
 800128c:	60a2      	str	r2, [r4, #8]
 800128e:	e7f4      	b.n	800127a <__swsetup_r+0x8e>
 8001290:	2000      	movs	r0, #0
 8001292:	e7f7      	b.n	8001284 <__swsetup_r+0x98>
 8001294:	2000000c 	.word	0x2000000c

08001298 <__swhatbuf_r>:
 8001298:	b570      	push	{r4, r5, r6, lr}
 800129a:	460c      	mov	r4, r1
 800129c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012a0:	2900      	cmp	r1, #0
 80012a2:	b096      	sub	sp, #88	@ 0x58
 80012a4:	4615      	mov	r5, r2
 80012a6:	461e      	mov	r6, r3
 80012a8:	da0d      	bge.n	80012c6 <__swhatbuf_r+0x2e>
 80012aa:	89a3      	ldrh	r3, [r4, #12]
 80012ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012b0:	f04f 0100 	mov.w	r1, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2340      	movne	r3, #64	@ 0x40
 80012b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012bc:	2000      	movs	r0, #0
 80012be:	6031      	str	r1, [r6, #0]
 80012c0:	602b      	str	r3, [r5, #0]
 80012c2:	b016      	add	sp, #88	@ 0x58
 80012c4:	bd70      	pop	{r4, r5, r6, pc}
 80012c6:	466a      	mov	r2, sp
 80012c8:	f000 f8ae 	bl	8001428 <_fstat_r>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	dbec      	blt.n	80012aa <__swhatbuf_r+0x12>
 80012d0:	9901      	ldr	r1, [sp, #4]
 80012d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012da:	4259      	negs	r1, r3
 80012dc:	4159      	adcs	r1, r3
 80012de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e2:	e7eb      	b.n	80012bc <__swhatbuf_r+0x24>

080012e4 <__smakebuf_r>:
 80012e4:	898b      	ldrh	r3, [r1, #12]
 80012e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012e8:	079d      	lsls	r5, r3, #30
 80012ea:	4606      	mov	r6, r0
 80012ec:	460c      	mov	r4, r1
 80012ee:	d507      	bpl.n	8001300 <__smakebuf_r+0x1c>
 80012f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	6123      	str	r3, [r4, #16]
 80012f8:	2301      	movs	r3, #1
 80012fa:	6163      	str	r3, [r4, #20]
 80012fc:	b003      	add	sp, #12
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	ab01      	add	r3, sp, #4
 8001302:	466a      	mov	r2, sp
 8001304:	f7ff ffc8 	bl	8001298 <__swhatbuf_r>
 8001308:	9f00      	ldr	r7, [sp, #0]
 800130a:	4605      	mov	r5, r0
 800130c:	4639      	mov	r1, r7
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff fc2a 	bl	8000b68 <_malloc_r>
 8001314:	b948      	cbnz	r0, 800132a <__smakebuf_r+0x46>
 8001316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800131a:	059a      	lsls	r2, r3, #22
 800131c:	d4ee      	bmi.n	80012fc <__smakebuf_r+0x18>
 800131e:	f023 0303 	bic.w	r3, r3, #3
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	81a3      	strh	r3, [r4, #12]
 8001328:	e7e2      	b.n	80012f0 <__smakebuf_r+0xc>
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	6020      	str	r0, [r4, #0]
 800132e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001332:	81a3      	strh	r3, [r4, #12]
 8001334:	9b01      	ldr	r3, [sp, #4]
 8001336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800133a:	b15b      	cbz	r3, 8001354 <__smakebuf_r+0x70>
 800133c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001340:	4630      	mov	r0, r6
 8001342:	f000 f80b 	bl	800135c <_isatty_r>
 8001346:	b128      	cbz	r0, 8001354 <__smakebuf_r+0x70>
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	f023 0303 	bic.w	r3, r3, #3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	81a3      	strh	r3, [r4, #12]
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	431d      	orrs	r5, r3
 8001358:	81a5      	strh	r5, [r4, #12]
 800135a:	e7cf      	b.n	80012fc <__smakebuf_r+0x18>

0800135c <_isatty_r>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4d06      	ldr	r5, [pc, #24]	@ (8001378 <_isatty_r+0x1c>)
 8001360:	2300      	movs	r3, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	602b      	str	r3, [r5, #0]
 8001368:	f7ff f8bf 	bl	80004ea <_isatty>
 800136c:	1c43      	adds	r3, r0, #1
 800136e:	d102      	bne.n	8001376 <_isatty_r+0x1a>
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	b103      	cbz	r3, 8001376 <_isatty_r+0x1a>
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	200001c4 	.word	0x200001c4

0800137c <_lseek_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4d07      	ldr	r5, [pc, #28]	@ (800139c <_lseek_r+0x20>)
 8001380:	4604      	mov	r4, r0
 8001382:	4608      	mov	r0, r1
 8001384:	4611      	mov	r1, r2
 8001386:	2200      	movs	r2, #0
 8001388:	602a      	str	r2, [r5, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f7ff f8b7 	bl	80004fe <_lseek>
 8001390:	1c43      	adds	r3, r0, #1
 8001392:	d102      	bne.n	800139a <_lseek_r+0x1e>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	b103      	cbz	r3, 800139a <_lseek_r+0x1e>
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	200001c4 	.word	0x200001c4

080013a0 <_read_r>:
 80013a0:	b538      	push	{r3, r4, r5, lr}
 80013a2:	4d07      	ldr	r5, [pc, #28]	@ (80013c0 <_read_r+0x20>)
 80013a4:	4604      	mov	r4, r0
 80013a6:	4608      	mov	r0, r1
 80013a8:	4611      	mov	r1, r2
 80013aa:	2200      	movs	r2, #0
 80013ac:	602a      	str	r2, [r5, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	f7ff f848 	bl	8000444 <_read>
 80013b4:	1c43      	adds	r3, r0, #1
 80013b6:	d102      	bne.n	80013be <_read_r+0x1e>
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	b103      	cbz	r3, 80013be <_read_r+0x1e>
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	200001c4 	.word	0x200001c4

080013c4 <_sbrk_r>:
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	4d06      	ldr	r5, [pc, #24]	@ (80013e0 <_sbrk_r+0x1c>)
 80013c8:	2300      	movs	r3, #0
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	602b      	str	r3, [r5, #0]
 80013d0:	f7ff f8a2 	bl	8000518 <_sbrk>
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	d102      	bne.n	80013de <_sbrk_r+0x1a>
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	b103      	cbz	r3, 80013de <_sbrk_r+0x1a>
 80013dc:	6023      	str	r3, [r4, #0]
 80013de:	bd38      	pop	{r3, r4, r5, pc}
 80013e0:	200001c4 	.word	0x200001c4

080013e4 <_write_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4d07      	ldr	r5, [pc, #28]	@ (8001404 <_write_r+0x20>)
 80013e8:	4604      	mov	r4, r0
 80013ea:	4608      	mov	r0, r1
 80013ec:	4611      	mov	r1, r2
 80013ee:	2200      	movs	r2, #0
 80013f0:	602a      	str	r2, [r5, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	f7ff f843 	bl	800047e <_write>
 80013f8:	1c43      	adds	r3, r0, #1
 80013fa:	d102      	bne.n	8001402 <_write_r+0x1e>
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	b103      	cbz	r3, 8001402 <_write_r+0x1e>
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	bd38      	pop	{r3, r4, r5, pc}
 8001404:	200001c4 	.word	0x200001c4

08001408 <_close_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	4d06      	ldr	r5, [pc, #24]	@ (8001424 <_close_r+0x1c>)
 800140c:	2300      	movs	r3, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	f7ff f84f 	bl	80004b6 <_close>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_close_r+0x1a>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	b103      	cbz	r3, 8001422 <_close_r+0x1a>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	200001c4 	.word	0x200001c4

08001428 <_fstat_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4d07      	ldr	r5, [pc, #28]	@ (8001448 <_fstat_r+0x20>)
 800142c:	2300      	movs	r3, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	f7ff f849 	bl	80004cc <_fstat>
 800143a:	1c43      	adds	r3, r0, #1
 800143c:	d102      	bne.n	8001444 <_fstat_r+0x1c>
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	b103      	cbz	r3, 8001444 <_fstat_r+0x1c>
 8001442:	6023      	str	r3, [r4, #0]
 8001444:	bd38      	pop	{r3, r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	200001c4 	.word	0x200001c4

0800144c <_free_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4605      	mov	r5, r0
 8001450:	2900      	cmp	r1, #0
 8001452:	d041      	beq.n	80014d8 <_free_r+0x8c>
 8001454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001458:	1f0c      	subs	r4, r1, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	bfb8      	it	lt
 800145e:	18e4      	addlt	r4, r4, r3
 8001460:	f7ff fe36 	bl	80010d0 <__malloc_lock>
 8001464:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <_free_r+0x90>)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	b933      	cbnz	r3, 8001478 <_free_r+0x2c>
 800146a:	6063      	str	r3, [r4, #4]
 800146c:	6014      	str	r4, [r2, #0]
 800146e:	4628      	mov	r0, r5
 8001470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001474:	f7ff be32 	b.w	80010dc <__malloc_unlock>
 8001478:	42a3      	cmp	r3, r4
 800147a:	d908      	bls.n	800148e <_free_r+0x42>
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	1821      	adds	r1, r4, r0
 8001480:	428b      	cmp	r3, r1
 8001482:	bf01      	itttt	eq
 8001484:	6819      	ldreq	r1, [r3, #0]
 8001486:	685b      	ldreq	r3, [r3, #4]
 8001488:	1809      	addeq	r1, r1, r0
 800148a:	6021      	streq	r1, [r4, #0]
 800148c:	e7ed      	b.n	800146a <_free_r+0x1e>
 800148e:	461a      	mov	r2, r3
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b10b      	cbz	r3, 8001498 <_free_r+0x4c>
 8001494:	42a3      	cmp	r3, r4
 8001496:	d9fa      	bls.n	800148e <_free_r+0x42>
 8001498:	6811      	ldr	r1, [r2, #0]
 800149a:	1850      	adds	r0, r2, r1
 800149c:	42a0      	cmp	r0, r4
 800149e:	d10b      	bne.n	80014b8 <_free_r+0x6c>
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	4401      	add	r1, r0
 80014a4:	1850      	adds	r0, r2, r1
 80014a6:	4283      	cmp	r3, r0
 80014a8:	6011      	str	r1, [r2, #0]
 80014aa:	d1e0      	bne.n	800146e <_free_r+0x22>
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	6053      	str	r3, [r2, #4]
 80014b2:	4408      	add	r0, r1
 80014b4:	6010      	str	r0, [r2, #0]
 80014b6:	e7da      	b.n	800146e <_free_r+0x22>
 80014b8:	d902      	bls.n	80014c0 <_free_r+0x74>
 80014ba:	230c      	movs	r3, #12
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	e7d6      	b.n	800146e <_free_r+0x22>
 80014c0:	6820      	ldr	r0, [r4, #0]
 80014c2:	1821      	adds	r1, r4, r0
 80014c4:	428b      	cmp	r3, r1
 80014c6:	bf04      	itt	eq
 80014c8:	6819      	ldreq	r1, [r3, #0]
 80014ca:	685b      	ldreq	r3, [r3, #4]
 80014cc:	6063      	str	r3, [r4, #4]
 80014ce:	bf04      	itt	eq
 80014d0:	1809      	addeq	r1, r1, r0
 80014d2:	6021      	streq	r1, [r4, #0]
 80014d4:	6054      	str	r4, [r2, #4]
 80014d6:	e7ca      	b.n	800146e <_free_r+0x22>
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
 80014da:	bf00      	nop
 80014dc:	200001c0 	.word	0x200001c0

080014e0 <_init>:
 80014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e2:	bf00      	nop
 80014e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e6:	bc08      	pop	{r3}
 80014e8:	469e      	mov	lr, r3
 80014ea:	4770      	bx	lr

080014ec <_fini>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr
