//where is led connected? what is the port? and pin? AND push button
// connected to PORT A PIN 5

//use the user manual->Block diagram & Memory map->fetch the base addresses
#define PERIPH_BASE 				(0x40000000UL)
//0x40020000UL is LED AND AHB1 ADDRESS
#define AHB1PERIPH_OFFSET 			(0x00020000UL)
#define AHB1PERIPH_BASE				(PERIPH_BASE+AHB1PERIPH_OFFSET)
#define GPIOA_OFFSET				(0x0000U)	//same as 0x0000 0000 0000 0000, IT IS 0000 FROM AHB1
#define GPIOA_BASE					(AHB1PERIPH_BASE + GPIOA_OFFSET)

//LET US NOW ENABLE CLOCK, IT IS RCC
#define RCC_OFFSET 					(0X3800UL)
#define RCC_BASE					(AHB1PERIPH_BASE + RCC_OFFSET)

//REGISTER ADDRESS, USE REFERENCE MANUAL AND SEARCH ahb1en,
// We are going to locate the addresses of the registers within the peripherals
#define AHB1EN_R_OFFSET				(0x30UL)
#define RCC_AHB1EN_R				(*(volatile unsigned int *)(RCC_BASE + AHB1EN_R_OFFSET))

#define MODE_R_OFFSET				(0X00UL)
#define GPIOA_MODE_R				(*(volatile unsigned int *)(GPIOA_BASE + MODE_R_OFFSET))

#define OD_R_OFFSET					(0x14UL)
#define GPIOA_OD_R					(*(volatile unsigned int *)(GPIOA_BASE + OD_R_OFFSET))

#define GPIOAEN						(1U<<0)	//Ob 0000 0000 0000 0000 0000 0000 0000 0001

#define PIN5						(1U<<5)
#define LED_PIN						PIN5


int main(void)
{
	//enable clock access to GPIOA
	RCC_AHB1EN_R |= GPIOAEN;			//|=IS USED TO SET PERTICULAR BIT TO 1

	//set PA5 as output pin
	GPIOA_MODE_R |= (1U<<10);
	GPIOA_MODE_R &=~ (1U<<11);

	while(1)
	{
		//set PA5 high or turn on LED
		GPIOA_OD_R |= LED_PIN;
	}
	for(;;);
}
