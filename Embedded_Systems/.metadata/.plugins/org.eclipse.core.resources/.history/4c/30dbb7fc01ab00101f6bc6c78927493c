//where is led connected? what is the port? and pin? AND push button
// connected to PORT A PIN 5

//use the user manual->Block diagram & Memory map->fetch the base addresses
#define PERIPH_BASE 				(0x40000000UL)	//All STM32 peripheral registers start from address  0x4000_0000  according to the memory map
//0x40020000UL is LED AND AHB1 ADDRESS
#define AHB1PERIPH_OFFSET 			(0x00020000UL)
#define AHB1PERIPH_BASE				(PERIPH_BASE+AHB1PERIPH_OFFSET)	//GPIO peripherals are on the AHB1 bus, which controls high-speed peripherals like GPIOA, GPIOB, etc
#define GPIOA_OFFSET				(0x0000U)	//same as 0x0000 0000 0000 0000, IT IS 0000 FROM AHB1
#define GPIOA_BASE					(AHB1PERIPH_BASE + GPIOA_OFFSET)	//gives the starting address of GPIOA registers.

//LET US NOW ENABLE CLOCK, IT IS RCC
#define RCC_OFFSET 					(0X3800UL)
#define RCC_BASE					(AHB1PERIPH_BASE + RCC_OFFSET)	//refers to the Reset and Clock Control (RCC) register block

//REGISTER ADDRESS, USE REFERENCE MANUAL AND SEARCH ahb1en,
// We are going to locate the addresses of the registers within the peripherals
#define AHB1EN_R_OFFSET				(0x30UL)

/*Enable clock for GPIOA
	•	 RCC_AHB1EN_R  is at  RCC_BASE + 0x30UL .
	•	 RCC_AHB1EN_R |= GPIOAEN;  sets bit 0 of the RCC AHB1 clock enable register, activating the GPIOA peripheral clock. Without enabling this, access to GPIOA would not work

*/
#define RCC_AHB1EN_R				(*(volatile unsigned int *)(RCC_BASE + AHB1EN_R_OFFSET))


#define MODE_R_OFFSET				(0X00UL)
#define GPIOA_MODE_R				(*(volatile unsigned int *)(GPIOA_BASE + MODE_R_OFFSET))

#define OD_R_OFFSET					(0x14UL)
#define GPIOA_OD_R					(*(volatile unsigned int *)(GPIOA_BASE + OD_R_OFFSET))

#define GPIOAEN						(1U<<0)	//Ob 0000 0000 0000 0000 0000 0000 0000 0001

#define PIN5						(1U<<5)
#define LED_PIN						PIN5


int main(void)
{
	//enable clock access to GPIOA
	RCC_AHB1EN_R |= GPIOAEN;			//|=IS USED TO SET PERTICULAR BIT TO 1

	//set PA5 as output pin
	GPIOA_MODE_R |= (1U<<10);
	GPIOA_MODE_R &=~ (1U<<11);			//&=~ IS USED TO SET PARTICULAR BIT TO 0

	while(1)
	{
		//set PA5 high or turn on LED
		//GPIOA_OD_R |= LED_PIN;

		//TOGGLE ON AND OFF LED
		GPIOA_OD_R ^= LED_PIN;			//^= WILL MAKE IT 1 AND 0 REPEATEDLY
		for(int i=0;i<100000;i++);		//give a delay to see the blinky
	}
	for(;;);
}
